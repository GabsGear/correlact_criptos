{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv('dataset')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv('dataset272018')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(15, 15))\n",
    "ax3 = fig.add_subplot(331)\n",
    "ax3.set_xlabel('Amostra')\n",
    "ax3.set_ylabel('valor')\n",
    "ax3.set_title('BTCUSDT')\n",
    "plt.plot(df['BTCUSDT'])\n",
    "\n",
    "ax4 = fig.add_subplot(332)\n",
    "ax4.set_xlabel('Amostra')\n",
    "ax4.set_ylabel('valor')\n",
    "ax4.set_title('IOTABTC')\n",
    "plt.plot(df['IOTABTC'])\n",
    "\n",
    "ax5 = fig.add_subplot(333)\n",
    "ax5.set_xlabel('Amostra')\n",
    "ax5.set_ylabel('valor')\n",
    "ax5.set_title('ADABTC')\n",
    "plt.plot(df['ADABTC'])\n",
    "\n",
    "ax6 = fig.add_subplot(334)\n",
    "ax6.set_xlabel('Amostra')\n",
    "ax6.set_ylabel('valor')\n",
    "ax6.set_title('BNBBTC')\n",
    "plt.plot(df['BNBBTC'])\n",
    "\n",
    "ax7 = fig.add_subplot(335)\n",
    "ax7.set_xlabel('Amostra')\n",
    "ax7.set_ylabel('valor')\n",
    "ax7.set_title('EOSBTC')\n",
    "plt.plot(df['EOSBTC'])\n",
    "\n",
    "\n",
    "ax8 = fig.add_subplot(336)\n",
    "ax8.set_xlabel('Amostra')\n",
    "ax8.set_ylabel('valor')\n",
    "ax8.set_title('XRPBTC')\n",
    "plt.plot(df['XRPBTC'])\n",
    "\n",
    "\n",
    "ax9 = fig.add_subplot(337)\n",
    "ax9.set_xlabel('Amostra')\n",
    "ax9.set_ylabel('valor')\n",
    "ax9.set_title('ETHBTC')\n",
    "plt.plot(df['ETHBTC'])\n",
    "\n",
    "\n",
    "ax10 = fig.add_subplot(338)\n",
    "ax10.set_xlabel('Amostra')\n",
    "ax10.set_ylabel('valor')\n",
    "ax10.set_title('NEOBTC')\n",
    "plt.plot(df['NEOBTC'])\n",
    "\n",
    "ax11 = fig.add_subplot(339)\n",
    "ax11.set_xlabel('Amostra')\n",
    "ax11.set_ylabel('valor')\n",
    "ax11.set_title('LTCBTC')\n",
    "plt.plot(df['LTCBTC'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(timeseries):\n",
    "    normalized = (timeseries-timeseries.min())/(timeseries.max()-timeseries.min())\n",
    "    return normalized "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = df.columns\n",
    "col = col[1:len( df.columns)]\n",
    "for c in col:\n",
    "    df[col] = normalize(df[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "    def printAll():\n",
    "    fig = plt.figure(figsize=(15, 15))\n",
    "    ax3 = fig.add_subplot(331)\n",
    "    ax3.set_xlabel('Amostra')\n",
    "    ax3.set_ylabel('valor')\n",
    "    ax3.set_title('BTCUSDT')\n",
    "    plt.plot(df['BTCUSDT'])\n",
    "\n",
    "    ax4 = fig.add_subplot(332)\n",
    "    ax4.set_xlabel('Amostra')\n",
    "    ax4.set_ylabel('valor')\n",
    "    ax4.set_title('IOTABTC')\n",
    "    plt.plot(df['IOTABTC'])\n",
    "\n",
    "    ax5 = fig.add_subplot(333)\n",
    "    ax5.set_xlabel('Amostra')\n",
    "    ax5.set_ylabel('valor')\n",
    "    ax5.set_title('ADABTC')\n",
    "    plt.plot(df['ADABTC'])\n",
    "\n",
    "    ax6 = fig.add_subplot(334)\n",
    "    ax6.set_xlabel('Amostra')\n",
    "    ax6.set_ylabel('valor')\n",
    "    ax6.set_title('BNBBTC')\n",
    "    plt.plot(df['BNBBTC'])\n",
    "\n",
    "    ax7 = fig.add_subplot(335)\n",
    "    ax7.set_xlabel('Amostra')\n",
    "    ax7.set_ylabel('valor')\n",
    "    ax7.set_title('EOSBTC')\n",
    "    plt.plot(df['EOSBTC'])\n",
    "\n",
    "\n",
    "    ax8 = fig.add_subplot(336)\n",
    "    ax8.set_xlabel('Amostra')\n",
    "    ax8.set_ylabel('valor')\n",
    "    ax8.set_title('XRPBTC')\n",
    "    plt.plot(df['XRPBTC'])\n",
    "\n",
    "\n",
    "    ax9 = fig.add_subplot(337)\n",
    "    ax9.set_xlabel('Amostra')\n",
    "    ax9.set_ylabel('valor')\n",
    "    ax9.set_title('ETHBTC')\n",
    "    plt.plot(df['ETHBTC'])\n",
    "\n",
    "\n",
    "    ax10 = fig.add_subplot(338)\n",
    "    ax10.set_xlabel('Amostra')\n",
    "    ax10.set_ylabel('valor')\n",
    "    ax10.set_title('NEOBTC')\n",
    "    plt.plot(df['NEOBTC'])\n",
    "\n",
    "    ax11 = fig.add_subplot(339)\n",
    "    ax11.set_xlabel('Amostra')\n",
    "    ax11.set_ylabel('valor')\n",
    "    ax11.set_title('LTCBTC')\n",
    "    plt.plot(df['LTCBTC'])\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printAll():\n",
    "    fig = plt.figure(figsize=(15, 15))\n",
    "    ax3 = fig.add_subplot(331)\n",
    "    ax3.set_xlabel('Amostra')\n",
    "    ax3.set_ylabel('valor')\n",
    "    ax3.set_title('BTCUSDT')\n",
    "    plt.plot(df['BTCUSDT'])\n",
    "\n",
    "    ax4 = fig.add_subplot(332)\n",
    "    ax4.set_xlabel('Amostra')\n",
    "    ax4.set_ylabel('valor')\n",
    "    ax4.set_title('IOTABTC')\n",
    "    plt.plot(df['IOTABTC'])\n",
    "\n",
    "    ax5 = fig.add_subplot(333)\n",
    "    ax5.set_xlabel('Amostra')\n",
    "    ax5.set_ylabel('valor')\n",
    "    ax5.set_title('ADABTC')\n",
    "    plt.plot(df['ADABTC'])\n",
    "\n",
    "    ax6 = fig.add_subplot(334)\n",
    "    ax6.set_xlabel('Amostra')\n",
    "    ax6.set_ylabel('valor')\n",
    "    ax6.set_title('BNBBTC')\n",
    "    plt.plot(df['BNBBTC'])\n",
    "\n",
    "    ax7 = fig.add_subplot(335)\n",
    "    ax7.set_xlabel('Amostra')\n",
    "    ax7.set_ylabel('valor')\n",
    "    ax7.set_title('EOSBTC')\n",
    "    plt.plot(df['EOSBTC'])\n",
    "\n",
    "\n",
    "    ax8 = fig.add_subplot(336)\n",
    "    ax8.set_xlabel('Amostra')\n",
    "    ax8.set_ylabel('valor')\n",
    "    ax8.set_title('XRPBTC')\n",
    "    plt.plot(df['XRPBTC'])\n",
    "\n",
    "\n",
    "    ax9 = fig.add_subplot(337)\n",
    "    ax9.set_xlabel('Amostra')\n",
    "    ax9.set_ylabel('valor')\n",
    "    ax9.set_title('ETHBTC')\n",
    "    plt.plot(df['ETHBTC'])\n",
    "\n",
    "\n",
    "    ax10 = fig.add_subplot(338)\n",
    "    ax10.set_xlabel('Amostra')\n",
    "    ax10.set_ylabel('valor')\n",
    "    ax10.set_title('NEOBTC')\n",
    "    plt.plot(df['NEOBTC'])\n",
    "\n",
    "    ax11 = fig.add_subplot(339)\n",
    "    ax11.set_xlabel('Amostra')\n",
    "    ax11.set_ylabel('valor')\n",
    "    ax11.set_title('LTCBTC')\n",
    "    plt.plot(df['LTCBTC'])\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "printAll()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv('dataset272018')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printAll():\n",
    "    fig = plt.figure(figsize=(15, 15))\n",
    "    ax3 = fig.add_subplot(331)\n",
    "    ax3.set_xlabel('Amostra')\n",
    "    ax3.set_ylabel('valor')\n",
    "    ax3.set_title('BTCUSDT')\n",
    "    plt.plot(df['BTCUSDT'])\n",
    "\n",
    "    ax4 = fig.add_subplot(332)\n",
    "    ax4.set_xlabel('Amostra')\n",
    "    ax4.set_ylabel('valor')\n",
    "    ax4.set_title('IOTABTC')\n",
    "    plt.plot(df['IOTABTC'])\n",
    "\n",
    "    ax5 = fig.add_subplot(333)\n",
    "    ax5.set_xlabel('Amostra')\n",
    "    ax5.set_ylabel('valor')\n",
    "    ax5.set_title('ADABTC')\n",
    "    plt.plot(df['ADABTC'])\n",
    "\n",
    "    ax6 = fig.add_subplot(334)\n",
    "    ax6.set_xlabel('Amostra')\n",
    "    ax6.set_ylabel('valor')\n",
    "    ax6.set_title('BNBBTC')\n",
    "    plt.plot(df['BNBBTC'])\n",
    "\n",
    "    ax7 = fig.add_subplot(335)\n",
    "    ax7.set_xlabel('Amostra')\n",
    "    ax7.set_ylabel('valor')\n",
    "    ax7.set_title('EOSBTC')\n",
    "    plt.plot(df['EOSBTC'])\n",
    "\n",
    "\n",
    "    ax8 = fig.add_subplot(336)\n",
    "    ax8.set_xlabel('Amostra')\n",
    "    ax8.set_ylabel('valor')\n",
    "    ax8.set_title('XRPBTC')\n",
    "    plt.plot(df['XRPBTC'])\n",
    "\n",
    "\n",
    "    ax9 = fig.add_subplot(337)\n",
    "    ax9.set_xlabel('Amostra')\n",
    "    ax9.set_ylabel('valor')\n",
    "    ax9.set_title('ETHBTC')\n",
    "    plt.plot(df['ETHBTC'])\n",
    "\n",
    "\n",
    "    ax10 = fig.add_subplot(338)\n",
    "    ax10.set_xlabel('Amostra')\n",
    "    ax10.set_ylabel('valor')\n",
    "    ax10.set_title('NEOBTC')\n",
    "    plt.plot(df['NEOBTC'])\n",
    "\n",
    "    ax11 = fig.add_subplot(339)\n",
    "    ax11.set_xlabel('Amostra')\n",
    "    ax11.set_ylabel('valor')\n",
    "    ax11.set_title('LTCBTC')\n",
    "    plt.plot(df['LTCBTC'])\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "printAll()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(timeseries):\n",
    "    normalized = (timeseries-timeseries.min())/(timeseries.max()-timeseries.min())\n",
    "    return normalized "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = df.columns\n",
    "col = col[1:len( df.columns)]\n",
    "for c in col:\n",
    "    df[col] = normalize(df[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "printAll()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "% matplotlib inline\n",
    "pd.plotting.scatter_matrix(df, alpha = 0.3, figsize = (14,8), diagonal = 'kde');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import pearsonr\n",
    "import seaborn as sns\n",
    "plt.figure(figsize=(12,8))\n",
    "kwargs = {'fontsize':12,'color':'black'}\n",
    "sns.heatmap(df.corr(),annot=True,robust=True)\n",
    "plt.title('Correlation Analysis',**kwargs)\n",
    "plt.tick_params(length=3,labelsize=12,color='black')\n",
    "plt.yticks(rotation=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print2(dt1, dt2):\n",
    "    fig = plt.figure(figsize=(30, 30))\n",
    "    ax6 = fig.add_subplot(334)\n",
    "    ax6.set_xlabel('Amostra')\n",
    "    ax6.set_ylabel('valor')\n",
    "    ax6.set_title(dt1)\n",
    "    plt.plot(df[dt1])\n",
    "\n",
    "    ax7 = fig.add_subplot(335)\n",
    "    ax7.set_xlabel('Amostra')\n",
    "    ax7.set_ylabel('valor')\n",
    "    ax7.set_title(dt2)\n",
    "    plt.plot(df[dt2])\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "print2('BTCUSDT', 'ADABTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "print2('BTCUSDT', 'ETHBTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare(dt1, dt2):\n",
    "    plt.plot(df['NEOBTC'], label='NEOBTC')\n",
    "    plt.plot(df['ADABTC'], label='ADABTC')\n",
    "    plt.xlabel('Amostra')\n",
    "    plt.ylabel('Valor')\n",
    "    plt.title(\"Compare\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare(dt1, dt2):\n",
    "    plt.plot(df[dt1], label=dt1)\n",
    "    plt.plot(df[dt2], label=dt2)\n",
    "    plt.xlabel('Amostra')\n",
    "    plt.ylabel('Valor')\n",
    "    plt.title(\"Compare\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "compare('BTCUSDT', 'ETHBTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "% notebook inline\n",
    "def compare(dt1, dt2):\n",
    "    plt.plot(df[dt1], label=dt1)\n",
    "    plt.plot(df[dt2], label=dt2)\n",
    "    plt.xlabel('Amostra')\n",
    "    plt.ylabel('Valor')\n",
    "    plt.title(\"Compare\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "compare('BTCUSDT', 'ETHBTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "% matplotlib notebook\n",
    "def compare(dt1, dt2):\n",
    "    plt.plot(df[dt1], label=dt1)\n",
    "    plt.plot(df[dt2], label=dt2)\n",
    "    plt.xlabel('Amostra')\n",
    "    plt.ylabel('Valor')\n",
    "    plt.title(\"Compare\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "compare('BTCUSDT', 'ETHBTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "def compare(dt1, dt2):\n",
    "    plt.plot(df[dt1], label=dt1)\n",
    "    plt.plot(df[dt2], label=dt2)\n",
    "    plt.xlabel('Amostra')\n",
    "    plt.ylabel('Valor')\n",
    "    plt.title(\"Compare\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "compare('BTCUSDT', 'ETHBTC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "print2('BTCUSDT', 'EOSBTC')"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
